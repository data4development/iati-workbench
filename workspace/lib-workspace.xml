<?xml version="1.0" encoding="UTF-8"?>
<!--  IATI workbench: produce and use IATI data
  Copyright (C) 2016-2022, drostan.org and data4development.org
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published
  by the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.
  
  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->  
<project name="lib-workspace">
  <description>
    Workspace helpers library. To be imported in a workspace build.xml, which allows
    overriding the targets. These targets are then still available as lib-workspace.* 
  </description>

  <property file="config/iati-workbench.properties"/> 

  <available file="config/iati-workbench.properties" property="config.properties.exist"/>

  <target name="config.properties" unless="config.properties.exist">
    <echo>Add a file config/iati-workbench.properties and include locations of remote files.</echo>
    <fail/>
  </target>

  <!-- List input files from remote location -->
  <target name="ls-inputs" depends="config.properties">
    <echo message="Listing files from ${remote.input}"/>
    <exec executable="rclone">
      <arg value="--log-level"/>
      <arg value="INFO"/>
      <arg value="ls"/>
      <arg line="${remote.input}"/>
    </exec>
  </target>
  
  <!-- Get input files from remote location -->
  <target name="get-remote" depends="config.properties">
    <echo message="Getting files from ${remote.input}"/>
    <exec executable="rclone">
      <arg value="--log-level"/>
      <arg value="INFO"/>
      <arg value="sync"/>
      <arg line="--exclude '*/**'"/>
      <arg line="${remote.input}"/>
      <arg value="input"/>
    </exec>
  </target>
  
  <!-- Get input files from remote location, including subdirs -->
  <target name="get-remote-deep" depends="config.properties">
    <echo message="Getting files from ${remote.input}"/>
    <exec executable="rclone">
      <arg value="--log-level"/>
      <arg value="INFO"/>
      <arg value="sync"/>
      <arg line="${remote.input}"/>
      <arg value="input"/>
    </exec>
  </target>

  <!-- can be overridden in workspace to depend on get-remote-deep or another mechanism -->
  <target name="get-inputs" depends="get-remote"/>

  <!-- empty target to override if actions are needed after downloading remote files -->
  <extension-point name="postprocess-inputs"/>

  <target name="prep-new-inputs">
    <!-- update csv-map and open git diff -->
    <exec executable="iati-workbench">
      <arg value="spreadsheet-map"/>
    </exec>
    <exec executable="git">
      <arg value="diff"/>
      <arg value="output/csv-map.csv"/>
    </exec>
    
    <!-- commit changes in input/ and output/csv-map.csv -->
    <exec executable="git">
      <arg value="add"/>
      <arg value="input/"/>
      <arg value="output/csv-map.csv"/>
    </exec>
    <exec executable="git">
      <arg value="commit"/>
      <arg value="-m"/>
      <arg value="New input files"/>
    </exec>
  </target>

  <target name="prep-input-fixes">
    <!-- commit changes in input/ -->
    <exec executable="git">
      <arg value="add"/>
      <arg value="input/"/>
    </exec>
    <exec executable="git">
      <arg value="commit"/>
      <arg value="-m"/>
      <arg value="Updates/fixes in input files"/>
    </exec>
  </target>
  
  <target name="spreadsheet-iati">
    <exec executable="iati-workbench">
      <arg value="spreadsheet-iati"/>
    </exec>
  </target>
  
  <!-- can  be overridden to do something with the IATI files before publishing -->
  <target name="postprocess-iati"/>

  <target name="open-reports">
    <apply executable="gio">
      <arg line="open"/>
      <srcfile/>
      <fileset dir="reports" includes="*.feedback.html"/>
    </apply>
  </target>

  <target name="s2i-run" description="Run an S2I conversion"
    depends="get-inputs, postprocess-inputs, prep-new-inputs, spreadsheet-iati, postprocess-iati, open-reports"/>
   
  <target name="s2i-rerun" description="Rerun an S2I conversion (skip csv-map and git commit" 
    depends="get-inputs, postprocess-inputs, prep-input-fixes, spreadsheet-iati, postprocess-iati, open-reports"/>

  <target name="s2i-publish" description="Publish the IATI file(s) and push the repository">
    <exec executable="gsutil">
      <arg value="cp"/>
      <arg value="output/iati-activities.xml"/>
      <arg value="gs://dataworkbench-static-files/publisher/${dwb.organisation}/iati-activities.xml"/>
    </exec>
    <exec executable="gsutil">
      <arg value="cp"/>
      <arg value="src/iati-organisations.xml"/>
      <arg value="gs://dataworkbench-static-files/publisher/${dwb.organisation}/iati-organisations.xml"/>
    </exec>

    <!-- Add changes in src/ and push to google repositories -->
    <exec executable="git">
      <arg value="add"/>
      <arg value="src/"/>
    </exec>
    <exec executable="git">
      <arg value="add"/>
      <arg value="output/iati-*.xml"/>
    </exec>
    <exec executable="git">
      <arg value="commit"/>
      <arg value="-m"/>
      <arg value="Update IATI data"/>
    </exec>
    <exec executable="git">
      <arg value="push"/>
      <arg value="google"/>
    </exec>
  </target>
</project>
