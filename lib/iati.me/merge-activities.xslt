<?xml version="1.0" encoding="UTF-8"?>
<!--  IATI workbench: produce and use IATI data
  Copyright (C) 2016-2022, drostan.org and data4development.org

  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as published
  by the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.

  You should have received a copy of the GNU Affero General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<!--
  This styleheet merges IATI activity elements into a predictable sequence:
  it follows the IATI Standard, and sorts activities and elements within activities.
  This should make standard file versioning more useful when inspecting the results.
  See the detailed remarks for more information.

  It also does some deduplication of elements based on "best effort":
  * Repeated elements will not be included.
  * Attributes with empty values will not be included.

  There still are some open to do's: the code works for existing clients,
  but deduplication is not always fully defined, and it is possible to construct
  inputs where it won't work.
-->
<xsl:stylesheet version='3.0'
  xmlns:xsl='http://www.w3.org/1999/XSL/Transform'
  xmlns:merge="http://aida.tools/merge"
  xmlns:functx="http://www.functx.com"
  expand-text="yes"
  exclude-result-prefixes="#all">

  <xsl:output indent="yes"/>

  <xsl:template name="merge-activities">
    <xsl:param name="input-activities"/>
    <xsl:comment>This file has been generated by the AIDA converter service. See https://aida.tools for more information</xsl:comment>
    <iati-activities version="2.03" generated-datetime="{current-dateTime()}"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:noNamespaceSchemaLocation="http://iatistandard.org/203/schema/downloads/iati-activities-schema.xsd">
      <!-- Gather all elements per activity, and sort them by identifier -->
      <xsl:for-each-group select="$input-activities" group-by="functx:trim(@merge:id)">
        <xsl:sort select="current-grouping-key()"/>

        <!-- select the first default language attribute -->
        <xsl:variable name="default-lang" select="(current-group()/@xml:lang, 'en')[1]"/>

        <!-- if the activity is not excluded -->
        <xsl:if test="not(current-group()/@merge:exclude='true')">
          <xsl:call-template name="merge-activity">
            <xsl:with-param name="input-activities" select="current-group()"/>
            <xsl:with-param name="iati-identifier" select="current-grouping-key()"/>
            <xsl:with-param name="default-lang" select="$default-lang" tunnel="yes"/>
          </xsl:call-template>
        </xsl:if>
      </xsl:for-each-group>
    </iati-activities>
  </xsl:template>

  <xsl:template name="merge-activity">
    <xsl:param name="input-activities"/>
    <xsl:param name="iati-identifier"/>
    <xsl:param name="default-lang" tunnel="yes"/>

    <iati-activity>
      <xsl:copy-of select="$input-activities/@*[.!='' and not(name(.)=('merge:id', 'merge:exclude', 'xml:lang'))]" />
      <xsl:attribute name="xml:lang" select="$default-lang"/>
      <iati-identifier>{$iati-identifier}</iati-identifier>
      <xsl:apply-templates select="($input-activities/reporting-org)[1]"/>

      <xsl:where-populated>
        <title>
          <xsl:call-template name="narratives">
            <xsl:with-param name="narratives" select="$input-activities/title/narrative[.!='']"/>
          </xsl:call-template>
        </title>
      </xsl:where-populated>

      <xsl:for-each-group select="$input-activities/description" group-by="@type">
        <xsl:where-populated>
          <description>
            <xsl:on-non-empty>
              <!-- include attributes if there are narratives -->
              <xsl:copy-of select="current-group()/@*" />
            </xsl:on-non-empty>

            <xsl:call-template name="narratives">
              <xsl:with-param name="narratives" select="current-group()/narrative[.!='']"/>
            </xsl:call-template>
          </description>
        </xsl:where-populated>
      </xsl:for-each-group>

      <xsl:for-each-group select="$input-activities/participating-org" group-by="@role">
        <!-- all orgs with refs -->
        <xsl:for-each-group select="current-group()[@ref!='']" group-by="@ref">
          <xsl:apply-templates select="current-group()[1]"/>
        </xsl:for-each-group>
        <!-- all orgs without refs -->
        <xsl:for-each-group select="current-group()[not(@ref) or @ref='']" group-by="narrative[1]">
          <xsl:apply-templates select="current-group()[1]"/>
        </xsl:for-each-group>
      </xsl:for-each-group>

      <xsl:apply-templates select="$input-activities/other-identifier"/>
      <xsl:for-each-group select="$input-activities/activity-status[@code!='']" group-by="@code">
        <xsl:apply-templates select="current-group()[1]"/>
      </xsl:for-each-group>

      <xsl:for-each-group select="$input-activities/activity-date[@iso-date!='']" group-by="@type">
        <xsl:sort select="@iso-date"/>
        <xsl:apply-templates select="current-group()[1]"/>
      </xsl:for-each-group>

      <xsl:for-each-group select="$input-activities/contact-info" group-by="@type">
        <xsl:apply-templates select="current-group()[1]"/>
      </xsl:for-each-group>
      <xsl:for-each-group select="$input-activities/activity-scope[@code!='']" group-by="@code">
        <xsl:apply-templates select="current-group()[1]"/>
      </xsl:for-each-group>

      <xsl:for-each-group select="$input-activities/recipient-country" group-by="@code">
        <xsl:for-each-group select="current-group()" group-by="@percentage">
          <xsl:apply-templates select="current-group()[1]"/>
        </xsl:for-each-group>
      </xsl:for-each-group>

      <xsl:apply-templates select="$input-activities/recipient-region[@code!='']"/>
      <xsl:apply-templates select="$input-activities/location"/>

      <xsl:for-each-group select="$input-activities/sector" group-by="@vocabulary">
        <xsl:for-each-group select="current-group()" group-by="@code">
          <xsl:for-each-group select="current-group()" group-by="@percentage">
            <xsl:apply-templates select="current-group()[1]"/>
          </xsl:for-each-group>
        </xsl:for-each-group>
      </xsl:for-each-group>

      <xsl:apply-templates select="$input-activities/tag"/>
      <xsl:apply-templates select="$input-activities/country-budget-items"/>
      <xsl:apply-templates select="$input-activities/humanitarian-scope"/>
      <xsl:apply-templates select="$input-activities/policy-marker"/>

      <xsl:for-each-group select="$input-activities/collaboration-type[@code!='']" group-by="@code">
        <xsl:apply-templates select="current-group()[1]"/>
      </xsl:for-each-group>
      <xsl:for-each-group select="$input-activities/default-flow-type[@code!='']" group-by="@code">
        <xsl:apply-templates select="current-group()[1]"/>
      </xsl:for-each-group>
      <xsl:for-each-group select="$input-activities/default-finance-type[@code!='']" group-by="@code">
        <xsl:apply-templates select="current-group()[1]"/>
      </xsl:for-each-group>
      <xsl:for-each-group select="$input-activities/default-aid-type[@code!='']" group-by="@code">
        <xsl:apply-templates select="current-group()[1]"/>
      </xsl:for-each-group>
      <xsl:for-each-group select="$input-activities/default-tied-status[@code!='']" group-by="@code">
        <xsl:apply-templates select="current-group()[1]"/>
      </xsl:for-each-group>

      <xsl:for-each-group select="$input-activities/budget" group-by="@type">
        <!-- TODO split by @status as well -->
        <xsl:apply-templates select="current-group()"/>
      </xsl:for-each-group>

      <xsl:apply-templates select="$input-activities/planned-disbursement"/>
      <xsl:apply-templates select="$input-activities/capital-spend"/>
      <xsl:apply-templates select="$input-activities/transaction[transaction-type/@code!='' and value!='']"/>
      <xsl:apply-templates select="$input-activities/document-link[@url!='']"/>

      <xsl:for-each-group select="$input-activities/related-activity" group-by="@ref">
        <xsl:for-each-group select="current-group()" group-by="@type">
          <xsl:apply-templates select="current-group()[1]"/>
        </xsl:for-each-group>
      </xsl:for-each-group>

      <xsl:if test="$input-activities/conditions/condition/narrative">
        <conditions attached="1">
          <xsl:for-each-group select="$input-activities/conditions/condition" group-by="@type">
            <xsl:variable name="ctype" select="current-grouping-key()"/>
            <xsl:for-each-group select="current-group()" group-by="narrative">
              <condition type="{$ctype}">
                <!-- TODO add language -->
                <narrative>{current-grouping-key()}</narrative>
              </condition>
            </xsl:for-each-group>
          </xsl:for-each-group>
        </conditions>
      </xsl:if>

      <xsl:for-each-group select="$input-activities/result" group-by="@merge:id">
        <xsl:if test="current-group()/indicator/title/narrative/text() and current-group()/@type">
          <result>
            <xsl:copy-of select="current-group()/@*[.!='' and name(.)!='merge:id']" />
            <!-- TODO find the proper way to avoid duplicates... this may eliminate multiple language versions -->
            <xsl:apply-templates select="(current-group()/title)[1]"/>
            <xsl:apply-templates select="(current-group()/description)[1]"/>
            <xsl:apply-templates select="current-group()/*[not(name()=('title', 'description', 'indicator'))]"/>

            <xsl:for-each-group select="current-group()/indicator" group-by="@merge:id">
              <indicator>
                <xsl:copy-of select="current-group()/@*[.!='' and name(.)!='merge:id']"/>
                <!-- TODO find the proper way to avoid duplicates... this may eliminate multiple language versions, and multiple baselines versions -->
                <xsl:apply-templates select="(current-group()/title)[1]"/>
                <xsl:apply-templates select="(current-group()/description)[1]"/>
                <xsl:for-each-group select="current-group()/reference" group-by="@vocabulary">
                  <xsl:for-each-group select="." group-by="@code">
                    <xsl:copy-of select="." copy-namespaces="no"/>
                  </xsl:for-each-group>
                </xsl:for-each-group>
                <xsl:for-each-group select="current-group()/baseline" group-by="@merge:id">
                  <baseline>
                    <xsl:copy-of select="current-group()/@*[.!='' and name(.)!='merge:id']" />
                    <xsl:apply-templates select="current-group()[1]/dimension"/>
                    <xsl:apply-templates select="current-group()[1]/comment"/>
                  </baseline>
                </xsl:for-each-group>
                <xsl:apply-templates select="current-group()/*[not(name()=('title', 'description', 'baseline', 'reference'))]"/>
              </indicator>
            </xsl:for-each-group>
          </result>
        </xsl:if>
      </xsl:for-each-group>

      <xsl:apply-templates select="$input-activities/resultcrs-add"/>
      <xsl:apply-templates select="$input-activities/fss"/>

      <xsl:apply-templates select="current-group()/*[namespace-uri()]"/>
    </iati-activity>
  </xsl:template>

  <!-- ignore these elements: -->

  <!-- text elements without any narrative element with actual content -->
  <xsl:template match="title                [not(narrative[.!=''])]"/>
  <xsl:template match="description          [not(narrative[.!=''])]"/>
  <xsl:template match="comment              [not(narrative[.!=''])]"/>
  <xsl:template match="condition            [not(narrative[.!=''])]"/>
  <xsl:template match="organisation         [not(narrative[.!=''])]"/>
  <xsl:template match="department           [not(narrative[.!=''])]"/>
  <xsl:template match="person-name          [not(narrative[.!=''])]"/>
  <xsl:template match="job-title            [not(narrative[.!=''])]"/>
  <xsl:template match="mailing-address      [not(narrative[.!=''])]"/>
  <xsl:template match="name                 [not(narrative[.!=''])]"/>
  <xsl:template match="activity-description [not(narrative[.!=''])]"/>

  <xsl:template match="telephone[.='']"/>

  <xsl:template match="provider-org[not(@*[.!='']) and not(narrative[.!=''])]"/>
  <xsl:template match="receiver-org[not(@*[.!='']) and not(narrative[.!=''])]"/>

  <xsl:template match="period[not(target) and not(actual)]"/>

  <!-- targets or actuals without values -->
  <xsl:template match="target[not(@value) or @value='']"/>
  <xsl:template match="actual[not(@value) or @value='']"/>

  <!-- other empty elements -->
  <xsl:template match="policy-marker[@code='']"/>
  <xsl:template match="point[normalize-space(pos)='']"/>
  <xsl:template match="location-reach[@code='']"/>
  <xsl:template match="location-id[@code='']"/>
  <xsl:template match="administrative[@code='']"/>
  <xsl:template match="exactness[@code='']"/>
  <xsl:template match="feature-designation[@code='']"/>

  <xsl:template match="related-activity[@ref='']"/>
</xsl:stylesheet>
